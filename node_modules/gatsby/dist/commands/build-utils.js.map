{"version":3,"sources":["../../src/commands/build-utils.js"],"names":["fs","require","path","remove","removePageHtmlFile","getPageHtmlFilePath","removePageDataFile","fixedPagePath","getChangedPageDataKeys","state","cachedPageData","pageData","pageKeys","forEach","newPageDataHash","key","has","push","previousPageDataHash","get","pages","keys","collectRemovedPageData","deletedPageKeys","_value","checkAndRemoveEmptyDir","publicDir","pagePath","pageHtmlDirectory","dirname","pageDataDirectory","join","hasFiles","readdirSync","length","removeSync","sortedPageKeysByNestedLevel","sort","a","b","currentPagePathValue","split","previousPagePathValue","removePageFiles","removePages","map","removePageData","Promise","all","then","module","exports"],"mappings":"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","sourcesContent":["const fs = require(`fs-extra`)\nconst path = require(`path`)\nconst {\n  remove: removePageHtmlFile,\n  getPageHtmlFilePath,\n} = require(`../utils/page-html`)\nconst {\n  remove: removePageDataFile,\n  fixedPagePath,\n} = require(`../utils/page-data`)\n\nconst getChangedPageDataKeys = (state, cachedPageData) => {\n  if (cachedPageData && state.pageData) {\n    const pageKeys = []\n    state.pageData.forEach((newPageDataHash, key) => {\n      if (!cachedPageData.has(key)) {\n        pageKeys.push(key)\n      } else {\n        const previousPageDataHash = cachedPageData.get(key)\n        if (newPageDataHash !== previousPageDataHash) {\n          pageKeys.push(key)\n        }\n      }\n    })\n    return pageKeys\n  }\n\n  return [...state.pages.keys()]\n}\n\nconst collectRemovedPageData = (state, cachedPageData) => {\n  if (cachedPageData && state.pageData) {\n    const deletedPageKeys = []\n    cachedPageData.forEach((_value, key) => {\n      if (!state.pageData.has(key)) {\n        deletedPageKeys.push(key)\n      }\n    })\n    return deletedPageKeys\n  }\n  return []\n}\n\nconst checkAndRemoveEmptyDir = (publicDir, pagePath) => {\n  const pageHtmlDirectory = path.dirname(\n    getPageHtmlFilePath(publicDir, pagePath)\n  )\n  const pageDataDirectory = path.join(\n    publicDir,\n    `page-data`,\n    fixedPagePath(pagePath)\n  )\n  const hasFiles = fs.readdirSync(pageHtmlDirectory)\n\n  // if page's html folder is empty also remove matching page-data folder\n  if (!hasFiles.length) {\n    fs.removeSync(pageHtmlDirectory)\n    fs.removeSync(pageDataDirectory)\n  }\n}\n\nconst sortedPageKeysByNestedLevel = pageKeys =>\n  pageKeys.sort((a, b) => {\n    const currentPagePathValue = a.split(`/`).length\n    const previousPagePathValue = b.split(`/`).length\n    return previousPagePathValue - currentPagePathValue\n  })\n\nconst removePageFiles = ({ publicDir }, pageKeys) => {\n  const removePages = pageKeys.map(pagePath =>\n    removePageHtmlFile({ publicDir }, pagePath)\n  )\n\n  const removePageData = pageKeys.map(pagePath =>\n    removePageDataFile({ publicDir }, pagePath)\n  )\n\n  return Promise.all([...removePages, ...removePageData]).then(() => {\n    // Sort removed pageKeys by nested directories and remove if empty.\n    sortedPageKeysByNestedLevel(pageKeys).forEach(pagePath => {\n      checkAndRemoveEmptyDir(publicDir, pagePath)\n    })\n  })\n}\n\nmodule.exports = {\n  getChangedPageDataKeys,\n  collectRemovedPageData,\n  removePageFiles,\n}\n"],"file":"build-utils.js"}