{"version":3,"sources":["../../src/redux/run-sift.js"],"names":["default","sift","require","_","prepareRegex","makeRe","getValueAt","toDottedFields","objectToDottedField","liftResolvedFields","createDbQueriesFromObject","prefixResolvedFields","dbQueryToSiftQuery","ensureIndexByTypedChain","getNodesByTypedChain","addResolvedNodes","getNode","siftGetNode","prepareQueryArgs","filterFields","Object","keys","reduce","acc","key","value","isPlainObject","getFilters","filters","map","isEqId","siftArgs","length","id","handleFirst","nodes","index","isEmpty","findIndex","$and","handleMany","result","filter","runFlatFilterWithoutSift","chain","targetValue","nodeTypeNames","typedKeyValueIndexes","nodesByKeyValue","undefined","join","runFilterAndSort","args","queryArgs","sort","resolvedFields","firstOnly","applyFilters","sortNodes","exports","runSift","filterWithoutSift","slice","filterWithSift","type","query","comparator","path","forEach","typeName","_runSiftOnNodes","f","runSiftOnNodes","siftFilter","node","$eq","internal","includes","dottedFields","dottedFieldKeys","sortFields","fields","field","some","startsWith","v","sortOrder","order","toLowerCase","orderBy"],"mappings":"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","sourcesContent":["// @flow\nconst { default: sift } = require(`sift`)\nconst _ = require(`lodash`)\nconst prepareRegex = require(`../utils/prepare-regex`)\nconst { makeRe } = require(`micromatch`)\nconst { getValueAt } = require(`../utils/get-value-at`)\nconst {\n  toDottedFields,\n  objectToDottedField,\n  liftResolvedFields,\n  createDbQueriesFromObject,\n  prefixResolvedFields,\n  dbQueryToSiftQuery,\n} = require(`../db/common/query`)\nconst {\n  ensureIndexByTypedChain,\n  getNodesByTypedChain,\n  addResolvedNodes,\n  getNode: siftGetNode,\n} = require(`./nodes`)\n\n/////////////////////////////////////////////////////////////////////\n// Parse filter\n/////////////////////////////////////////////////////////////////////\n\nconst prepareQueryArgs = (filterFields = {}) =>\n  Object.keys(filterFields).reduce((acc, key) => {\n    const value = filterFields[key]\n    if (_.isPlainObject(value)) {\n      acc[key === `elemMatch` ? `$elemMatch` : key] = prepareQueryArgs(value)\n    } else {\n      switch (key) {\n        case `regex`:\n          acc[`$regex`] = prepareRegex(value)\n          break\n        case `glob`:\n          acc[`$regex`] = makeRe(value)\n          break\n        default:\n          acc[`$${key}`] = value\n      }\n    }\n    return acc\n  }, {})\n\nconst getFilters = filters =>\n  Object.keys(filters).map(key => {\n    return { [key]: filters[key] }\n  })\n\n/////////////////////////////////////////////////////////////////////\n// Run Sift\n/////////////////////////////////////////////////////////////////////\n\nfunction isEqId(siftArgs) {\n  // The `id` of each node is invariably unique. So if a query is doing id $eq(string) it can find only one node tops\n  return (\n    siftArgs.length > 0 &&\n    siftArgs[0].id &&\n    Object.keys(siftArgs[0].id).length === 1 &&\n    Object.keys(siftArgs[0].id)[0] === `$eq`\n  )\n}\n\nfunction handleFirst(siftArgs, nodes) {\n  if (nodes.length === 0) {\n    return []\n  }\n\n  const index = _.isEmpty(siftArgs)\n    ? 0\n    : nodes.findIndex(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  if (index !== -1) {\n    return [nodes[index]]\n  } else {\n    return []\n  }\n}\n\nfunction handleMany(siftArgs, nodes) {\n  let result = _.isEmpty(siftArgs)\n    ? nodes\n    : nodes.filter(\n        sift({\n          $and: siftArgs,\n        })\n      )\n\n  return result?.length ? result : null\n}\n\n/**\n * Given the chain of a simple filter, return the set of nodes that pass the\n * filter. The chain should be a property chain leading to the property to\n * check, followed by the value to check against. Common example:\n *   `allThings(filter: { fields: { slug: { eq: $slug } } })`\n * Only nodes of given node types will be considered\n * A fast index is created if one doesn't exist yet so cold call is slower.\n * The empty result value is null if firstOnly is false, or else an empty array.\n *\n * @param {Array<string>} chain Note: `$eq` is assumed to be the leaf prop here\n * @param {boolean | number | string} targetValue chain.a.b.$eq === targetValue\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | Map<string, Map<string | number | boolean, Node>>} typedKeyValueIndexes\n * @returns {Array<Node> | undefined}\n */\nconst runFlatFilterWithoutSift = (\n  chain,\n  targetValue,\n  nodeTypeNames,\n  typedKeyValueIndexes\n) => {\n  ensureIndexByTypedChain(chain, nodeTypeNames, typedKeyValueIndexes)\n\n  const nodesByKeyValue = getNodesByTypedChain(\n    chain,\n    targetValue,\n    nodeTypeNames,\n    typedKeyValueIndexes\n  )\n\n  // If we couldn't find the needle then maybe sift can, for example if the\n  // schema contained a proxy; `slug: String @proxy(from: \"slugInternal\")`\n  // There are also cases (and tests) where id exists with a different type\n  if (!nodesByKeyValue) {\n    return undefined\n  }\n\n  if (chain.join(`,`) === `id`) {\n    // The `id` key is not indexed in Sets (because why) so don't spread it\n    return [nodesByKeyValue]\n  }\n\n  // In all other cases this must be a non-empty Set because the indexing\n  // mechanism does not create a Set unless there's a Node for it\n  return [...nodesByKeyValue]\n}\n\n/**\n * Filters and sorts a list of nodes using mongodb-like syntax.\n *\n * @param args raw graphql query filter/sort as an object\n * @property {boolean | number | string} args.type gqlType. See build-node-types\n * @property {boolean} args.firstOnly true if you want to return only the first\n *   result found. This will return a collection of size 1. Not a single element\n * @property {{filter?: Object, sort?: Object} | undefined} args.queryArgs\n * @property {undefined | Map<string, Map<string | number | boolean, Node>>} args.typedKeyValueIndexes\n *   May be undefined. A cache of indexes where you can look up Nodes grouped\n *   by a key: `types.join(',')+'/'+filterPath.join('+')`, which yields a Map\n *   which holds a Set of Nodes for the value that the filter is trying to eq\n *   against. If the property is `id` then there is no Set, it's just the Node.\n *   This object lives in query/query-runner.js and is passed down runQuery\n * @returns Collection of results. Collection will be limited to 1\n *   if `firstOnly` is true\n */\nconst runFilterAndSort = (args: Object) => {\n  const {\n    queryArgs: { filter, sort } = { filter: {}, sort: {} },\n    resolvedFields = {},\n    firstOnly = false,\n    nodeTypeNames,\n    typedKeyValueIndexes,\n  } = args\n\n  let result = applyFilters(\n    filter,\n    firstOnly,\n    nodeTypeNames,\n    typedKeyValueIndexes,\n    resolvedFields\n  )\n\n  return sortNodes(result, sort, resolvedFields)\n}\n\nexports.runSift = runFilterAndSort\n\n/**\n * Applies filter. First through a simple approach, which is much faster than\n * running sift, but not as versatile and correct. If no nodes were found then\n * it falls back to filtering through sift.\n *\n * @param {Object | undefined} filterFields\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | Map<string, Map<string | number | boolean, Node>>} typedKeyValueIndexes\n * @param resolvedFields\n * @returns {Array<Node> | undefined} Collection of results. Collection will be\n *   limited to 1 if `firstOnly` is true\n */\nconst applyFilters = (\n  filterFields,\n  firstOnly,\n  nodeTypeNames,\n  typedKeyValueIndexes,\n  resolvedFields\n) => {\n  const filters = filterFields\n    ? prefixResolvedFields(\n        createDbQueriesFromObject(prepareQueryArgs(filterFields)),\n        resolvedFields\n      )\n    : []\n\n  const result = filterWithoutSift(filters, nodeTypeNames, typedKeyValueIndexes)\n  if (result) {\n    if (firstOnly) {\n      return result.slice(0, 1)\n    }\n    return result\n  }\n\n  return filterWithSift(filters, firstOnly, nodeTypeNames, resolvedFields)\n}\n\n/**\n * Check if the filter is \"flat\" (single leaf) and an \"$eq\". If so, uses custom\n * indexes based on filter and types and returns any result it finds.\n * If conditions are not met or no nodes are found, returns undefined.\n *\n * @param {Object} filter Resolved. (Should be checked by caller to exist)\n * @param {Array<string>} nodeTypeNames\n * @param {undefined | Map<string, Map<string | number | boolean, Node>>} typedKeyValueIndexes\n * @returns {Array|undefined} Collection of results\n */\nconst filterWithoutSift = (filters, nodeTypeNames, typedKeyValueIndexes) => {\n  // This can also be `$ne`, `$in` or any other grapqhl comparison op\n  if (\n    !typedKeyValueIndexes ||\n    filters.length !== 1 ||\n    filters[0].type === `elemMatch` ||\n    filters[0].query.comparator !== `$eq`\n  ) {\n    return undefined\n  }\n\n  const filter = filters[0]\n\n  return runFlatFilterWithoutSift(\n    filter.path,\n    filter.query.value,\n    nodeTypeNames,\n    typedKeyValueIndexes\n  )\n}\n\n// Not a public API\nexports.filterWithoutSift = filterWithoutSift\n\n/**\n * Use sift to apply filters\n *\n * @param {Array<Object>} filter Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @returns {Array<Node> | undefined | null} Collection of results. Collection\n *   will be limited to 1 if `firstOnly` is true\n */\nconst filterWithSift = (filter, firstOnly, nodeTypeNames, resolvedFields) => {\n  let nodes = []\n\n  nodeTypeNames.forEach(typeName => addResolvedNodes(typeName, nodes))\n\n  return _runSiftOnNodes(\n    nodes,\n    filter.map(f => dbQueryToSiftQuery(f)),\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields,\n    siftGetNode\n  )\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n * Note: this entry point is used by GATSBY_DB_NODES=loki\n *\n * @param {Array<Node>} nodes Should be all nodes of given type(s)\n * @param args Legacy api arg, see _runSiftOnNodes\n * @param {?function(id: string): Node} getNode\n * @returns {Array<Node> | undefined | null} Collection of results. Collection\n *   will be limited to 1 if `firstOnly` is true\n */\nconst runSiftOnNodes = (nodes, args, getNode = siftGetNode) => {\n  const {\n    queryArgs: { filter } = { filter: {} },\n    firstOnly = false,\n    resolvedFields = {},\n    nodeTypeNames,\n  } = args\n\n  let siftFilter = getFilters(\n    liftResolvedFields(toDottedFields(prepareQueryArgs(filter)), resolvedFields)\n  )\n\n  return _runSiftOnNodes(\n    nodes,\n    siftFilter,\n    firstOnly,\n    nodeTypeNames,\n    resolvedFields,\n    getNode\n  )\n}\n\nexports.runSiftOnNodes = runSiftOnNodes\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<Node>} nodes Should be all nodes of given type(s)\n * @param {Array<Object>} filter Resolved\n * @param {boolean} firstOnly\n * @param {Array<string>} nodeTypeNames\n * @param resolvedFields\n * @param {function(id: string): Node} getNode Note: this is different for loki\n * @returns {Array<Node> | undefined | null} Collection of results. Collection\n *   will be limited to 1 if `firstOnly` is true\n */\nconst _runSiftOnNodes = (\n  nodes,\n  filter,\n  firstOnly,\n  nodeTypeNames,\n  resolvedFields,\n  getNode\n) => {\n  // If the the query for single node only has a filter for an \"id\"\n  // using \"eq\" operator, then we'll just grab that ID and return it.\n  if (isEqId(filter)) {\n    const node = getNode(filter[0].id.$eq)\n\n    if (\n      !node ||\n      (node.internal && !nodeTypeNames.includes(node.internal.type))\n    ) {\n      if (firstOnly) {\n        return []\n      }\n      return null\n    }\n\n    return [node]\n  }\n\n  if (firstOnly) {\n    return handleFirst(filter, nodes)\n  } else {\n    return handleMany(filter, nodes)\n  }\n}\n\n/**\n * Given a list of filtered nodes and sorting parameters, sort the nodes\n *\n * @param {Array<Node> | undefined | null} nodes Pre-filtered list of nodes\n * @param {Object | undefined} sort Sorting arguments\n * @param resolvedFields\n * @returns {Array<Node> | undefined | null} Same as input, except sorted\n */\nconst sortNodes = (nodes, sort, resolvedFields) => {\n  if (!sort || nodes?.length <= 1) {\n    return nodes\n  }\n\n  // create functions that return the item to compare on\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.keys(dottedFields)\n  const sortFields = sort.fields\n    .map(field => {\n      if (\n        dottedFields[field] ||\n        dottedFieldKeys.some(key => field.startsWith(key))\n      ) {\n        return `__gatsby_resolved.${field}`\n      } else {\n        return field\n      }\n    })\n    .map(field => v => getValueAt(v, field))\n  const sortOrder = sort.order.map(order => order.toLowerCase())\n\n  return _.orderBy(nodes, sortFields, sortOrder)\n}\n"],"file":"run-sift.js"}